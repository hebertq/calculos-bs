CREATE TYPE public.errortypemsj AS (
	iserror bool,
	codeerror int4,
	mjserror varchar,
	errcontext text,
	codid int4);

CREATE TABLE public.msterrorlog (
	logid serial4 NOT NULL,
	procedimiento varchar(200) NOT NULL,
	errstate int4 DEFAULT 0 NOT NULL,
	mensaje varchar(1000) NULL,
	errcontent text DEFAULT 0 NOT NULL,
	useradd int4 NOT NULL,
	fechaadd timestamp DEFAULT now() NOT NULL,
	fechaaddnum int4 DEFAULT to_char(now(), 'YYYYMMDD'::text)::integer NULL,
	CONSTRAINT msterrorlog_pkey PRIMARY KEY (logid)
);

CREATE OR REPLACE FUNCTION public.add_daily_bonus(pvi_empleados integer, pdi_fecha character varying, pni_bnc numeric)
RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;	
        vi_empleado integer := 0;
BEGIN
     ve_error.iserror     := false;
     ve_error.codeerror   := 0;
     ve_error.mjserror    := 'Ok';
	 ve_error.codid       := 0;
	 ve_error.errcontext  := '';
	 
	 select e.id into vi_empleado 
	 from public.hr_employee e where e.x_empleado_id = pvi_empleados;
	 
	 if vi_empleado > 0 THEN	 	 	 
		 update public.hr_attendance set bono = coalesce(bono,0.00) + pni_bnc
		 where cast((check_in - interval '6 hour') as date) = cast(pdi_fecha as date)
			   and employee_id =  vi_empleado;
	else 
		ve_error.iserror     := true;
		ve_error.codeerror   := -1;
		ve_error.mjserror    := 'El empleado no existe.';
    end if;
				
RETURN ve_error;		 
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
		 ve_error.codeerror := -1;
         ve_error.mjserror  := SQLERRM;
		 
	insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
	values('public.add_daily_bonus',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);
		 
	RETURN ve_error;	 
END;
$function$;


-- DROP FUNCTION public.calcular_cuota_prestamo(numeric, numeric, int4, int4);

CREATE OR REPLACE FUNCTION public.calcular_cuota_prestamo(p_monto numeric, p_tasa_mensual numeric, p_plazo_meses integer, p_frecuencia_pago integer DEFAULT 1)
 RETURNS numeric(10,2)
 LANGUAGE plpgsql
AS $function$
DECLARE
    r numeric;             -- Tasa de interés periódica (mensual en este caso)
    n integer;             -- Número total de períodos (meses)
    cuota_fija numeric;    -- Cuota fija calculada
    v_tasa_periodica numeric;
BEGIN
    -- La tasa de interés periódica ya es mensual
    r := p_tasa_mensual / p_frecuencia_pago;

    -- El número total de períodos es el plazo en meses
    n := p_plazo_meses * p_frecuencia_pago;

    -- Calcular la cuota fija usando la fórmula
    IF r = 0 THEN
        -- Si la tasa de interés es 0, la cuota es simplemente el principal dividido por el número de períodos
        cuota_fija := (p_monto / n);
    ELSE
        cuota_fija := (p_monto * (r * (pow((1 + r), n)))) / (pow((1 + r), n) - 1);
    END IF;

    RETURN round(cuota_fija,3); -- Redondear la cuota a 2 decimales para fines prácticos
END;
$function$;

--drop FUNCTION public.crear_tabla_amortizacion
CREATE OR REPLACE FUNCTION public.crear_tabla_amortizacion(p_monto numeric, 
														   p_tasa_mensual numeric, 
														   p_plazo_meses integer, 
														   p_frecuencia_pago_mes integer DEFAULT 1,
														   p_fecha_inicio date DEFAULT current_date -- Fecha de inicio del préstamo
														   )
 RETURNS TABLE(pago_num integer, cuota numeric(10,3), intereses numeric(10,3), principal numeric(10,3), saldo numeric(10,3),fecha_pago date)
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_tasa_periodica numeric;
    v_num_pagos integer;
    v_cuota_fija_periodica numeric; -- Cuota fija por período (mensual or quincenal)
    v_saldo numeric := p_monto;
    v_interes numeric;
    v_principal numeric;
    v_pago_num integer := 0;
    v_fecha_actual date;
BEGIN
    -- Calcular la tasa de interés periódica
    v_tasa_periodica := p_tasa_mensual / p_frecuencia_pago_mes;

    -- Calcular el número total de pagos
    v_num_pagos := p_plazo_meses * p_frecuencia_pago_mes;

    -- Calcular la cuota fija por período
    v_cuota_fija_periodica :=  public.calcular_cuota_prestamo(p_monto,p_tasa_mensual,p_plazo_meses,p_frecuencia_pago_mes);

    -- Insertar la fila inicial (pago 0)
    pago_num   := v_pago_num;
    cuota      := 0.00;
    intereses  := 0.00;
    principal  := 0.00;
    saldo      := round(v_saldo, 2); -- Redondeamos el saldo inicial para la visualización
    fecha_pago := p_fecha_inicio; -- La fecha del pago 0 es la fecha de inicio
    RETURN NEXT;

    -- Generar la tabla de amortización para los pagos reales (desde el pago 1)
    WHILE v_pago_num < v_num_pagos
    LOOP
        v_pago_num := v_pago_num + 1; -- Incrementar el número de pago al inicio

        -- Calcular la fecha de pago para el vencimiento actual
        IF p_frecuencia_pago_mes = 1 THEN -- Pagos mensuales
            -- Para el pago 1, se suma 1 mes; para el pago 2, 2 meses, etc.
            v_fecha_actual := p_fecha_inicio + INTERVAL '1 month' * v_pago_num;
        ELSIF p_frecuencia_pago_mes = 2 THEN -- Pagos quincenales (dos veces al mes)
            -- Para el pago 1, se suman 15 días; para el pago 2, 30 días (2*15), etc.
            v_fecha_actual := p_fecha_inicio + (INTERVAL '15 days' * v_pago_num);
        ELSE
            -- Manejo de otras frecuencias o un valor por defecto si no se reconoce
            v_fecha_actual := NULL;
        END IF;

        -- Calcular el interés basado en el saldo actual
        v_interes := v_saldo * v_tasa_periodica;
        v_principal := v_cuota_fija_periodica - v_interes;

        -- Ajuste para la última cuota para asegurar que el saldo sea cero exacto
        IF v_pago_num = v_num_pagos THEN
            v_principal := v_saldo;
            cuota := v_interes + v_principal; -- La cuota final puede ser ligeramente diferente
        else
         	cuota := v_cuota_fija_periodica;
        END IF;

        v_saldo := v_saldo - v_principal;

        -- Asignar y redondear los valores para la salida de la tabla
        pago_num   := v_pago_num;      -- Correcto: sin redondeo para INTEGER
        cuota      := round(cuota::numeric, 2);
        intereses  := round(v_interes::numeric, 2);
        principal  := round(v_principal::numeric, 2);
        saldo      := round(v_saldo::numeric, 2);
        fecha_pago := v_fecha_actual;
        RETURN NEXT;
    END LOOP;

    RETURN;
END;
$function$;


CREATE OR REPLACE FUNCTION public.add_loan_request(pii_empleado integer, 
												   piv_motivoprestamo character varying, 
												   pin_montosolicitado numeric, 
												   pin_montoaprobado numeric, 
												   pii_plazo integer, 
												   pin_intereses numeric, 
												   pii_tipopago integer,
												   pid_fechapago date)
 RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;
        vn_cuota numeric(18,2);
	    vn_interes numeric(18,4);
		vi_numcuota integer;
		vi_empleado integer;
		vi_id int;
		vi_maxprestamo integer;
	    vi_total_principal numeric(18,2);
	    vi_total_interes numeric(18,2);
BEGIN
     ve_error.iserror    := false;
     ve_error.codeerror  := 0;
     ve_error.mjserror   := 'Ok';
	 ve_error.codid      := 0;
	 ve_error.errcontext := '';
	 
	 vn_interes    := pin_intereses /100;
	 vi_numcuota   := pii_plazo;
	 
	 IF pii_empleado IS NULL THEN
        ve_error.iserror := true;
        ve_error.codid  := -100;
        ve_error.codeerror := -1897; -- Código de error para violación de restricción NOT NULL
        ve_error.mjserror := 'El ID del empleado no puede ser nulo.';
        RETURN NEXT v_error;
        RETURN; -- Salir de la función
     END IF;
    
	 select id into vi_empleado 
	 from hr_employee 
	 where x_empleado_id = pii_empleado;
	 
	 -- calcular la cuota del prestamo a aplicar -----
	 vn_cuota := public.calcular_cuota_prestamo(pin_montoaprobado,vn_interes,pii_plazo,pii_tipopago);
	 
	 if not exists(select from hr_loan where employee_id = vi_empleado and cast(create_date as date) = cast((current_date - interval '6 hour') as date)) then
        select max(id)+1 into vi_maxprestamo from public.hr_loan;
       	
		insert into public.hr_loan(employee_id,installment,company_id,currency_id,create_uid,write_uid,		
	                    name,state,date,payment_date,create_date,write_date,loan_amount,total_amount,	                    
	                    balance_amount,total_paid_amount,x_interes,employee_account_id,treasury_account_id,journal_id)
		values(vi_empleado,(pii_plazo*pii_tipopago)+1,1,119,1,1,		
		       'LO/00' || vi_maxprestamo::varchar,'approve',pid_fechapago,pid_fechapago,current_timestamp,current_timestamp,vn_cuota,0,
		       0.00,0.00,vn_interes::float8,2,2,2) RETURNING id into vi_id;	
		
	    ve_error.codeerror  := vi_id;
		if vi_id is not null then
		    insert into hr_loan_line(employee_id,loan_id,create_uid,write_uid,x_no_cuota,amount,x_interes,x_principal,x_saldo,date,paid,create_date,write_date)
		    select vi_empleado,vi_id,1,1,*,false,current_date,current_timestamp
			from public.crear_tabla_amortizacion(pin_montoaprobado,vn_interes,pii_plazo,pii_tipopago);	
		    
		    select sum(x_principal),sum(x_interes) into vi_total_principal,vi_total_interes
		    from hr_loan_line
		    where employee_id = vi_empleado
		          and loan_id = vi_id;
		         
		    update hr_loan set total_paid_amount = vi_total_interes,
		                       total_amount = vi_total_principal,
		                       balance_amount = vi_total_principal + vi_total_interes,
		                       name = 'LO/00' || (vi_maxprestamo::varchar)
		    where id = vi_id;	
		end if;
     end if;
	 
	 ve_error.codid      := vi_numcuota * pii_tipopago;
	 ve_error.errcontext := cast(vn_cuota as varchar); 
RETURN NEXT ve_error;		 
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
         ve_error.mjserror  := SQLERRM;
		 
	insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
	values('public.addprestamo',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);

	SELECT setval(pg_get_serial_sequence('hr_loan','id'), (SELECT MAX(id) FROM hr_loan)) into vi_id;
	
	RETURN NEXT ve_error;	 
END;
$function$;

CREATE OR REPLACE FUNCTION public.cancel_loan(pii_empleado integer, 
											  pii_prestamo integer, 
											  pii_tarea integer)
 RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;        
		vi_empleado integer;
BEGIN
     ve_error.iserror    := false;
     ve_error.codeerror  := 0;
     ve_error.mjserror   := 'Ok';
	 ve_error.codid      := 0;
	 ve_error.errcontext := '';
	 
	 select id into vi_empleado 
	 from hr_employee 
	 where x_empleado_id = pii_empleado;
	 
	 update public.hr_loan_line set x_tarea_id = pii_tarea ,
	 								write_date = current_date ,
									paid = true 
	 where prestamo = loan_id and x_no_cuota > 0 and paid = false;
	  
	 update public.hr_loan set x_tarea_id = pii_tarea ,
	 						   write_date = current_date ,
							   state = 'done' 
	 where id = pii_prestamo
	       and employee_id = vi_empleado;
	 
     RETURN NEXT ve_error;		 
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.codid     := -1;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
         ve_error.mjserror  := SQLERRM;
		 
	insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
	values('public.addcancelarprestamo',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);
		
	RETURN NEXT ve_error;	 
END;
$function$;

CREATE OR REPLACE FUNCTION public.add_contract_hire(
    pvi_employee_full_name character varying, -- Renombrado para mayor claridad: Nombre completo del empleado
    pvi_departamento integer,
    pvi_no_seguro character varying,
    pvi_job_id integer,
    pvi_estructura integer,
    pni_salario numeric,
    pti_fecha_inicio timestamp, -- Renombrado pti_fechaini a pti_fecha_inicio para consistencia
    pvi_empleado_id integer, -- Renombrado pvi_empleadoid para mayor claridad: Este es x_empleado_id
    pvi_tipo_contrato integer,
    pbi_active_inss bool default false,
    pbi_tarjeta bool default false,
    pbi_active bool default true,
    pvi_state varchar default 'open'
)
 RETURNS errortypemsj -- Cambiado para devolver un solo registro, no SETOF
 LANGUAGE plpgsql
AS $function$
DECLARE
    ve_error errortypemsj%ROWTYPE;
    vi_empleado_internal_id integer; -- ID interno de hr_employee
    vv_contract_name varchar;
    vi_contract_id integer;
    vi_num_existing_contracts integer;
    vi_calendar_id integer := 1; -- Asumiendo un ID de calendario fijo por ahora
BEGIN
    ve_error.iserror    := false;
    ve_error.codeerror  := 0;
    ve_error.mjserror   := 'Ok';
    ve_error.errcontext := '';
    ve_error.codid      := 0; -- Inicializar codid para el caso de éxito

    -- Encontrar el ID de empleado interno basado en x_empleado_id
    SELECT id INTO vi_empleado_internal_id
    FROM public.hr_employee
    WHERE x_empleado_id = pvi_empleado_id;

    IF vi_empleado_internal_id IS NULL THEN
        RAISE EXCEPTION 'Empleado con x_empleado_id % no encontrado.', pvi_empleado_id;
    END IF;

    -- Contar los contratos existentes para este empleado para generar un nombre de contrato único
    SELECT COUNT(*) + 1 INTO vi_num_existing_contracts
    FROM public.hr_contract
    WHERE employee_id = vi_empleado_internal_id;

    -- Construir el nombre del contrato: Usando el nombre completo del empleado y su x_empleado_id
    vv_contract_name := split_part(pvi_employee_full_name, ' ', 1) || '-' || pvi_empleado_id::varchar || '-00' || vi_num_existing_contracts::varchar;

    -- Insertar el contrato del empleado
    INSERT INTO hr_contract (
        structure_type_id, employee_id, department_id, job_id,
        resource_calendar_id, company_id, contract_type_id,
        create_uid, write_uid, name, state, kanban_state,
        date_start, wage, active, create_date, write_date,
        struct_id, schedule_pay, analytic_account_id, journal_id
    )
    VALUES (
        pvi_estructura, vi_empleado_internal_id, pvi_departamento, pvi_job_id,
        vi_calendar_id, 1, pvi_tipo_contrato,
        1, 1, vv_contract_name, pvi_state, 'normal',
        pti_fecha_inicio, pni_salario, pbi_active, current_timestamp, current_timestamp,
        2, 'bi-monthly', 1, 2
    )
    RETURNING id INTO vi_contract_id;

    ve_error.codid = vi_contract_id; -- Devolver el ID del contrato recién creado
    RAISE NOTICE 'Contrato creado con ID: % para el empleado_id: %', vi_contract_id, vi_empleado_internal_id;

    -- Actualizar hr_employee con la información del contrato y otros detalles
    UPDATE public.hr_employee SET
        contract_id = vi_contract_id,
        ssnid = pvi_no_seguro,
        x_pago_tarjeta = pbi_tarjeta,
        x_activo_inss = pbi_active_inss
    WHERE id = vi_empleado_internal_id;

    RETURN ve_error;

EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error en public.add_contract_hire: %', SQLERRM;
    RAISE NOTICE 'SQLSTATE: %', SQLSTATE;
    RAISE NOTICE 'ID de contrato en error: %', vi_contract_id; -- Mostrará 0 o el ID si el error ocurrió después de RETURNING

    GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
    ve_error.iserror    := true;
    ve_error.codeerror := SQLSTATE;
    ve_error.mjserror  := SQLERRM;
    ve_error.codid      := -1; -- Indicar fallo, no hay ID de contrato válido

    INSERT INTO public.msterrorlog(procedimiento, errstate, mensaje, errcontent, useradd)
    VALUES('public.add_contract_hire', ve_error.codeerror, ve_error.mjserror, ve_error.errcontext, 1);

    -- Considera si realmente quieres restablecer la secuencia en caso de error.
    -- SELECT setval(pg_get_serial_sequence('public.hr_contract', 'id'), coalesce(max(id),0) + 1, false)
    -- FROM public.hr_contract;

    RETURN ve_error;
END;
$function$;


CREATE OR REPLACE FUNCTION public.add_employee_hire(
    piv_nombres character varying,
    pii_departamento integer,
    pvi_job_title character varying, -- Asumimos que es el título del puesto (varchar)
    pvi_celular character varying,
    pvi_direccion character varying,
    pvi_lugar_nacimiento character varying,
    pvi_sexo character varying,
    pvi_seguro character varying,
    pvi_cedula character varying,
    pvi_contacto_emergencia character varying,
    pvi_telefono_emergencia character varying,
    pvi_no_empleado integer, -- Este será x_empleado_id
    pdi_fecha_nac date,
    pdi_fecha_inicio date,
    pni_salario numeric,
    pvi_estructura_sal integer,
    pvi_tipo_contrato integer,
    pvi_estado_civil character varying
)
 RETURNS errortypemsj -- Cambiado para devolver un solo registro
 LANGUAGE plpgsql
AS $function$
DECLARE
    ve_error errortypemsj%ROWTYPE;
    empleado_id INTEGER;
    calendar_id INTEGER;
    resource_id INTEGER;
    no_empleado INTEGER;
    v_job_id INTEGER; -- Variable para almacenar el ID del puesto de trabajo
    r_contrato errortypemsj; -- Almacenará el resultado de add_contract_hire
BEGIN
    ve_error.iserror    := false;
    ve_error.codeerror  := 0;
    ve_error.mjserror   := 'Ok';
    ve_error.errcontext := '';
    ve_error.codid      := 0;

    -- Validar los parámetros de entrada
    IF piv_nombres IS NULL THEN
        RAISE EXCEPTION 'El nombre del empleado es obligatorio.';
    END IF;
    IF pii_departamento IS NULL THEN
        RAISE EXCEPTION 'El departamento del empleado es obligatorio.';
    END IF;
    IF pvi_job_title IS NULL THEN -- Usamos pvi_job_title
        RAISE EXCEPTION 'El puesto de trabajo del empleado es obligatorio.';
    END IF;
    IF pdi_fecha_inicio IS NULL THEN
        RAISE EXCEPTION 'La fecha de inicio del contrato es obligatoria.';
    END IF;

    -- Obtener el job_id a partir del job_title (asumiendo una tabla 'hr_job' con 'name' e 'id')
    -- ¡ADVERTENCIA! Si no encuentras el puesto, necesitarás manejar este caso.
    -- Podrías buscar por nombre o asumir que pvi_job_title es directamente el ID si es un entero.
    -- Aquí asumo que hr_job tiene un campo 'name' para el título y 'id' para el ID.
    SELECT id INTO v_job_id FROM public.hr_job WHERE name = pvi_job_title LIMIT 1;

    IF v_job_id IS NULL THEN
        RAISE EXCEPTION 'Job with title "%" not found. Please ensure the job exists or pass a valid ID.', pvi_job_title;
    END IF;

    -- Insertar en resource_calendar
    INSERT INTO public.resource_calendar(company_id, create_uid, write_uid, name,
                                        tz, hours_per_day, active, flexible_hours, create_date,
                                        write_date, full_time_required_hours)
    VALUES (1, 1, 1, 'Standard 48 Horas semanales',
            'America/Managua', 8, true, true, current_timestamp,
            current_timestamp, 48)
    RETURNING id INTO calendar_id;

    -- Insertar en resource_resource
    INSERT INTO public.resource_resource(company_id, user_id, calendar_id, create_uid, write_uid,
                                        name, resource_type, tz, active,
                                        create_date, write_date, time_efficiency)
    VALUES (1, 1, calendar_id, 1, 1,
            piv_nombres, 'user', 'America/Managua', true, current_timestamp,
            current_timestamp, 100)
    RETURNING id INTO resource_id;

    -- Lógica para asignar no_empleado
    IF pvi_no_empleado <> 0 THEN
        no_empleado := pvi_no_empleado;
    ELSE
        SELECT (COALESCE(MAX(x_empleado_id), 2499) + 1) INTO no_empleado FROM public.hr_employee;
        -- COALESCE asegura que si no hay empleados, empiece en 2500
    END IF;

    -- Insertar el nuevo empleado en la tabla hr_employee
    INSERT INTO hr_employee (
        user_id, parent_id, coach_id,
        private_country_id, country_id, country_of_birth,
        create_uid, write_uid, company_id,
        resource_id, resource_calendar_id,
        name, department_id, job_title, job_id, -- job_id ahora usa v_job_id
        mobile_phone, place_of_birth, private_street, private_city, private_zip,
        gender, ssnid, identification_id, emergency_contact, emergency_phone,
        distance_home_work_unit, employee_type, pin, birthday, active,
        is_flexible, is_fully_flexible, work_permit_scheduled_activity,
        create_date, write_date, attendance_manager_id,
        first_contract_date, contract_warning, expense_manager_id, leave_manager_id,
        joining_date, hourly_cost, marital
    ) VALUES (
        1, 1, 1,
        164, 164, 164,
        1, 1, 1,
        resource_id, calendar_id,
        piv_nombres, pii_departamento, pvi_job_title, v_job_id, -- pvi_job_title para título, v_job_id para ID
        pvi_celular, pvi_lugar_nacimiento, pvi_direccion, 'Managua', '11064',
        pvi_sexo, pvi_seguro, pvi_cedula, pvi_contacto_emergencia, pvi_telefono_emergencia,
        'kilometers', 'employee', no_empleado, pdi_fecha_nac,
        true, true, true, true,
        current_timestamp, current_timestamp, 2,
        pdi_fecha_inicio, false, 2, 2,
        pdi_fecha_inicio, ((pni_salario / 30) / 8),
        pvi_estado_civil
    )
    RETURNING id INTO empleado_id; -- Obtener el ID del empleado insertado

    -- Llamar a la función add_contract_hire para crear el contrato
    r_contrato := public.add_contract_hire(
        piv_nombres,            -- pvi_employee_full_name
        pii_departamento,
        pvi_seguro,
        v_job_id,               -- Usamos el job_id encontrado/pasado
        pvi_estructura_sal,
        pni_salario,
        pdi_fecha_inicio::timestamp,
        no_empleado,            -- Pasar x_empleado_id para que add_contract_hire lo use
        pvi_tipo_contrato,
        false,                  -- active_inss default (si aplica)
        false,                  -- tarjeta default (si aplica)
        true,                   -- active default (si aplica)
        'open'                  -- state default (si aplica)
    );

    -- Verificar si hubo un error en la llamada a add_contract_hire
    IF r_contrato.iserror THEN
        -- Si add_contract_hire falló, propaga ese error
        RAISE EXCEPTION 'Error al crear contrato para empleado %: %', empleado_id, r_contrato.mjserror;
    END IF;

    -- Devolver el resultado de éxito (o el error de add_contract_hire si se propaga)
    ve_error.codid := empleado_id; -- El ID del empleado creado
    RETURN ve_error;

EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error en public.add_employee_hire: %', SQLERRM;
    RAISE NOTICE 'SQLSTATE: %', SQLSTATE;
    -- No se puede usar vi_contrato aquí, ya que pertenece a add_contract_hire

    GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
    ve_error.iserror    := true;
    ve_error.codeerror := SQLSTATE;
    ve_error.mjserror  := SQLERRM;
    ve_error.codid      := -1; -- Indicar fallo

    INSERT INTO public.msterrorlog(procedimiento, errstate, mensaje, errcontent, useradd)
    VALUES('public.add_employee_hire', ve_error.codeerror, ve_error.mjserror, ve_error.errcontext, 1);

    -- Considera si realmente quieres restablecer la secuencia en caso de error.
    -- SELECT setval(pg_get_serial_sequence('public.hr_employee', 'id'), coalesce(max(id),0) + 1, false)
    -- FROM public.hr_employee;

    RETURN ve_error;
END;
$function$;


CREATE OR REPLACE FUNCTION public.add_absence_request(pii_origen integer, 
											   pii_tipo integer, 
											   pii_referencia integer, 
											   pii_empleado integer, 
											   pid_fechaini date, 
											   pid_fechafin date, 
											   piv_descripcion character varying, 
											   pii_usuario integer, 
											   pii_dias numeric, 
											   piv_tipoausencia character varying)
 RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;
        vd_dias numeric(18,2);
		vd_diassol numeric(18,2);
		vd_diasagui numeric(18,2);
		vd_ajusteagui numeric(18,2);
		vi_empacum integer;
		vi_errvac  integer;
		vi_departamento  integer;
		vi_ausencia  integer;
		vi_contrato  integer;
BEGIN	
	 ve_error.iserror    := false;
     ve_error.codeerror  := 0;
     ve_error.mjserror   := 'Ok';
	 ve_error.codid      := 0;
	 ve_error.errcontext := '';
	 vi_errvac := 0;
	 
	 select id,department_id into vi_empacum,vi_departamento 
	 from public.hr_employee where x_empleado_id = pii_empleado;
	 
	 vi_ausencia := case when piv_tipoausencia = 'Vacaciones' and pii_tipo = 1 then 2
	                     when piv_tipoausencia = 'Vacaciones' and pii_tipo = 2 then 1
						 when piv_tipoausencia = 'Subsidio' then 3
	                     when piv_tipoausencia = 'Falta injustificada' then 4
						 when piv_tipoausencia = 'Ausencias justificadas' then 5
                         when piv_tipoausencia = 'Cuarentena' then 6
						 when piv_tipoausencia = 'Cuarentena' then 7
					     else 4
					 end;

	 if piv_tipoausencia = 'Vacaciones' then	
	 	vi_errvac := (select public.cargarmovvacaciones(pii_origen,pii_tipo,pii_referencia,pii_empleado,pid_fechaini,
													    pid_fechafin,piv_descripcion,pii_usuario,pii_dias));
	 end if;
	 
	 if vi_errvac = 0 then 
	    insert into public.hr_leave(private_name,state,user_id,holiday_status_id,employee_id,department_id,date_from,date_to,
								    number_of_days,duration_display,meeting_id,holiday_type,first_approver_id,request_date_from,request_date_to,
								    request_date_from_period,request_unit_half,request_unit_hours,request_unit_custom,create_uid,write_uid)
	    select piv_descripcion private_name,'validate' state,pii_usuario as user_id,vi_ausencia holiday_status_id,vi_empacum as employee_id,
	           vi_departamento as department_id,(pid_fechaini + interval '6 hour') as date_from,(pid_fechafin + interval '6 hour') as date_to,case when pii_dias < 0 then pii_dias * -1 else pii_dias end as number_of_days,(pii_dias::varchar) || ' dias' duration_display,
		       1 meeting_id,'employee' holiday_type,1 first_approver_id,(pid_fechaini + interval '6 hour') as request_date_from,(pid_fechafin +interval '6 hour') as request_date_to,'am' request_date_from_period,
		       false request_unit_half,false request_unit_hours,false request_unit_custom,pii_usuario as create_uid,pii_usuario as write_uid;
	 end if;
	 
	 RETURN NEXT ve_error;
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
         ve_error.mjserror  := SQLERRM;
		 
		insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
		values('public.addausencias',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);
		
		RETURN NEXT ve_error;	
END;
$function$;

CREATE OR REPLACE FUNCTION public.add_employee_termination(pvi_empleados integer,pvi_tarea integer)
 RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;	
        vi_empleado integer;
BEGIN
     ve_error.iserror    := false;
     ve_error.codeerror  := 0;
     ve_error.mjserror   := 'Ok';
	 ve_error.codid      := 0;
	 ve_error.errcontext := '';
	 ve_error.codid      := 0;
	 
	 select e.id into vi_empleado 
	 from public.hr_employee e 
	 where e.x_empleado_id  = pvi_empleados;
	 
	 update public.hr_contract set --active   = false,
		                           state    = 'cancel',
								   date_end = current_date
	 where employee_id = vi_empleado
	       and active  = true
		   and state   = 'open';		   	 
	 
	 if (select count(*)
		 from public.hr_loan_line 		
		 where x_no_cuota <> 0
			  and paid = false
			  and employee_id = vi_empleado) > 0 then

		 update public.hr_loan_line set x_tarea_id = pvi_tarea,
	 								write_date = current_date ,
									paid = true 
		 where employee_id = vi_empleado;
		 
		update public.hr_loan set x_tarea_id = pii_tarea ,
	 						   write_date = current_date ,
							   state = 'done' 
	     where employee_id = vi_empleado
		       and id not in(select id from public.hr_loan where employee_id = vi_empleado and state <> 'done');
     end if;
RETURN ve_error;		 
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
         ve_error.mjserror  := SQLERRM;
		 ve_error.codid     := -1;
		 
	insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
	values('public.addbajaempleado',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);
		 
	RETURN ve_error;	 
END;
$function$;

-- DROP FUNCTION public.registrar_marcaciones_multiples(varchar, timestamp, timestamp, numeric, numeric, bool, int4, bool, timestamp, timestamp, numeric, numeric, bool);

CREATE OR REPLACE FUNCTION public.add_payroll_marking(empleados_ids character varying, 
													  hora_entrada timestamp, 
													  hora_salida timestamp, 
													  bono_cumplimiento numeric DEFAULT 0, 
													  tiempo_comida numeric DEFAULT 0, 
													  pagar_como_extra boolean DEFAULT false, 
													  company_id integer DEFAULT 1, 
													  es_doble_turno boolean DEFAULT false, 
													  hora_entrada_turno2 timestamp, 
													  hora_salida_turno2 timestamp, 
													  tiempo_comida_turno2 numeric DEFAULT 0, 
													  bono_cumplimiento_turno2 numeric DEFAULT 0, 
													  pagar_como_extra_turno2 boolean DEFAULT false)
 RETURNS SETOF errortypemsj
 LANGUAGE plpgsql
AS $function$
/*Procedimiento para ingreso de nuevos tipos*/
declare ve_error errortypemsj%ROWTYPE;
		empleado_id INTEGER;
		id_array INTEGER[];
		i INTEGER;
		clean_empleados_ids VARCHAR;
BEGIN
    ve_error.iserror    := false;
    ve_error.codeerror  := 0;
    ve_error.mjserror   := 'Ok';
	ve_error.codid      := 0;
	ve_error.errcontext := '';
	ve_error.codid      := 0;
	
	-- Validar los parámetros de entrada
    IF empleados_ids IS NULL OR empleados_ids = '' THEN
        RAISE EXCEPTION 'La lista de IDs de empleados es obligatoria.';
    END IF;
    IF hora_entrada IS NULL AND hora_salida IS NULL THEN
        RAISE EXCEPTION 'Se debe proporcionar al menos la hora de entrada o la hora de salida.';
    END IF;
    IF bono_cumplimiento IS NULL THEN
        RAISE EXCEPTION 'El bono de cumplimiento no puede ser nulo.';
    END IF;
    IF tiempo_comida IS NULL THEN
        RAISE EXCEPTION 'El tiempo de comida no puede ser nulo.';
    END IF;
    IF es_doble_turno AND (hora_entrada_turno2 IS NULL OR hora_salida_turno2 IS NULL) THEN
        RAISE EXCEPTION 'Para doble turno, se debe proporcionar hora_entrada_turno2 y hora_salida_turno2.';
    END IF;
    IF es_doble_turno AND tiempo_comida_turno2 IS NULL THEN
        RAISE EXCEPTION 'Para doble turno, se debe proporcionar tiempo_comida_turno2.';
    END IF;
    IF es_doble_turno AND bono_cumplimiento_turno2 IS NULL THEN
        RAISE EXCEPTION 'Para doble turno, se debe proporcionar bono_cumplimiento_turno2.';
    END IF;

    -- Limpiar la cadena de IDs de empleados
    clean_empleados_ids := regexp_replace(empleados_ids, '[^0-9,]', '', 'g');
	clean_empleados_ids := regexp_replace(clean_empleados_ids, ',,+', ',', 'g');
	clean_empleados_ids := trim(both ',' from clean_empleados_ids);
	
	id_array := string_to_array(clean_empleados_ids, ',')::INTEGER[];

    -- Recorrer el arreglo de IDs e insertar las marcaciones
    FOREACH empleado_id IN ARRAY id_array LOOP
	
        -- Validar que el empleado_id sea un entero válido
        IF empleado_id IS NULL OR empleado_id <= 0 THEN
            RAISE NOTICE 'Empleado ID: % no es valido, se omite', empleado_id;
            CONTINUE;
        END IF;

        -- Validar que no exista una marcación en el mismo horario para el empleado
        IF EXISTS (SELECT 1
				    FROM attendance_attendance
				    WHERE employee_id = empleado_id
				      AND (
				        (check_in <= hora_entrada AND check_out >= hora_entrada) OR
				        (check_in <= hora_salida AND check_out >= hora_salida) OR
				        (es_doble_turno AND (
				            (check_in <= hora_entrada_turno2 AND check_out >= hora_entrada_turno2) OR
				            (check_in <= hora_salida_turno2 AND check_out >= hora_salida_turno2)
				        ))
				      )
		) THEN
            RAISE NOTICE 'Ya existe una marcación para el empleado ID: % en el horario especificado, se omite', empleado_id;
            CONTINUE;
        END IF;

        -- Llamar a la función registrar_marcacion_x_id para insertar la marcación
        PERFORM registrar_marcacion_x_id(
            empleado_id => empleado_id,
            hora_entrada => hora_entrada,
            hora_salida => hora_salida,
            bono_cumplimiento => bono_cumplimiento,
            tiempo_comida => tiempo_comida,
            pagar_como_extra => pagar_como_extra,
            company_id => company_id
        );
        
        IF es_doble_turno THEN
             PERFORM registrar_marcacion_x_id(
                empleado_id => empleado_id,
                hora_entrada => hora_entrada_turno2,
                hora_salida => hora_salida_turno2,
                bono_cumplimiento => bono_cumplimiento_turno2,  -- Usar el bono del turno 2
                tiempo_comida => tiempo_comida_turno2,
                pagar_como_extra => pagar_como_extra_turno2, -- Pagar o no como extra el turno 2
                company_id => company_id
            );
        END IF;

    END LOOP;

RETURN ve_error;		 
EXCEPTION WHEN 
OTHERS THEN		 
	     GET STACKED DIAGNOSTICS ve_error.errcontext := PG_EXCEPTION_CONTEXT;
		 ve_error.iserror   := true;
         ve_error.codeerror := SQLSTATE;
         ve_error.mjserror  := SQLERRM;
		 ve_error.codid     := -1;
		 
	insert into public.msterrorlog(procedimiento,errstate,mensaje,errcontent,useradd) 
	values('public.add_payroll_marking',ve_error.codeerror,ve_error.mjserror,ve_error.errcontext,1);
		 
	RETURN ve_error;	 
END;
$function$;



